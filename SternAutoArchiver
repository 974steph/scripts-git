#!/usr/bin/env bash

##########################################
# Main Stuff
source $HOME/Sources/scripts-git/secret_stuff.sh
#DEBUG="YES"
REPO="$HOME/Stern"
EMAILS="${EMAIL_MINE}"
WORKDIR="/tmp"
BODY="${BODY}"
##########################################


##########################################
# DO MAIL
function domail() {

	END_EPOCH=$(date +%s)
#	DURATION=$(( (${END_EPOCH} - ${START_EPOCH}) / 60 ))
	DURATION=$(echo "scale=2;(${END_EPOCH} - ${START_EPOCH}) / 60" | bc)
	OLDSIZE=$(ls -sh "$1" | awk '{print $1}' | sed -e 's/[a-zA-Z]//g')
	NEWSIZE=$(ls -sh "$MONTH_REPO/$JUST_DATE.mp3" | awk '{print $1}' | sed -e 's/[a-zA-Z]//g')
	PERCENT=$(echo "(1-($NEWSIZE/$OLDSIZE)) * 100" | bc -l | sed -e 's/\(\.[0-9]\).*/\1/g')

	echo -e "$(date +%Y-%m-%d\ %H:%M:%S) Archive of ${FILE} completed."
	echo -e "Name: ${NUMBER_DATE}"
	echo -e "Album: Howard Stern - $MONTH_YEAR"
	echo -e "Old size: ${OLDSIZE}M"
	echo -e "New size: ${NEWSIZE}M"
	echo -e "$PERCENT% reduction"
	echo -e "Duration: ${DURATION} minutes"
	echo -e "---------------------------"

	unset START_EPOCH END_EPOCH DURATION OLDSIZE NEWSIZE PERCENT

#	echo -e "Name: ${NUMBER_DATE}" > ${BODY}
#	echo -e "Album: Howard Stern - $MONTH_YEAR" >> ${BODY}
#	echo -e "Old size: ${OLDSIZE}M" >> ${BODY}
#	echo -e "New size: ${NEWSIZE}M" >> ${BODY}
#	echo -e "$PERCENT% reduction" >> ${BODY}
#	${MAILER} -s "Success: $JUST_DATE.mp3" -a "Content-Type: text/html" "${EMAILS}" < ${BODY}
#	rm -f ${BODY}
}
##########################################


##########################################
# MAKE VARS
function makevars() {

	WS=$(echo $1 | awk '{print $1}' | sed -e 's/\.mp3//g' -e 's/[^a-zA-Z]//g')

	[ ! ${JUST_DATE} ] && JUST_DATE=$(echo $1 | awk '{print $1}' | cut -d'.' -f-1 | sed 's/[^0-9]//g')
#	PRETTY_DATE=$(date --date="$JUST_DATE" "+%A, %B %d, %Y")
	NUMBER_DATE=$(date --date="$JUST_DATE" "+%m/%d/%Y, %A")
	MONTH_YEAR=$(date --date="$JUST_DATE" "+%B - %Y")
	YEAR=$(date --date="$JUST_DATE" +%Y)
	MONTH=$(date --date="$JUST_DATE" "+%m-%B")
	TRACK=$(date --date="$JUST_DATE" "+%d")

	MONTH_REPO="${REPO}/${YEAR}/${MONTH}"
}
##########################################


##########################################
# MAKE A FIST
function MakeAFist() {

	FIST="$HOME/Pictures/Fist.png"
	FIST_MONTH_PNG="${WORKDIR}/fmonth.png"
	FIST_YEAR_PNG="${WORKDIR}/fyear.png"
	FIST_FISTED="${WORKDIR}/fist.png"

	FIST_A_MONTH=$(date -d ${JUST_DATE} +%B)
	FIST_A_YEAR=$(date -d ${JUST_DATE} +%Y)

	[ ${DEBUG} ] && echo "FIST_A_MONTH: $FIST_A_MONTH"
	[ ${DEBUG} ] && echo "FIST_A_YEAR: $FIST_A_YEAR"

	MONTH_ROT=$(( $(expr length "${FIST_A_MONTH}") * 7 ))
	YEAR_ROT=$(( $(expr length "${FIST_A_YEAR}") * 7 ))

	convert \
		-virtual-pixel Background \
		-background none \
		-pointsize 18 label:"${FIST_A_MONTH}" \
		-distort Arc ${MONTH_ROT} \
		"${FIST_MONTH_PNG}"

	convert \
		-virtual-pixel Background \
		-background none \
		-pointsize 18 label:"${FIST_A_YEAR}" \
		-rotate 180 \
		-distort Arc "${YEAR_ROT} 180" \
		"${FIST_YEAR_PNG}"

	composite -gravity north -geometry +0+1 "${FIST_MONTH_PNG}" "${FIST}" "${FIST_FISTED}"
	composite -gravity south -geometry +0+1 "${FIST_YEAR_PNG}" "${FIST_FISTED}" "${FIST_FISTED}"
	mv "${FIST_FISTED}" "${MONTH_REPO}/.folder.png"
	echo "[Desktop Entry]" > "${MONTH_REPO}/.directory"
	echo "Icon=./.folder.png" >> "${MONTH_REPO}/.directory"
	rm -f "${FIST_MONTH_PNG}" "${FIST_YEAR_PNG}"
}
##########################################


##########################################
# DO ARCHIVE
function doArchive() {

	START_EPOCH=$(date +%s)

	[ ${DEBUG} ] && SOX_V="-S"

	# Make wavs
	[ ${DEBUG} ] && echo "Make wavs"
	ionice -c3 sox -V1 --multi-threaded ${SOX_V} "$1" "$MONTH_REPO/$JUST_DATE.wav"

	# Make mp3
	[ ${DEBUG} ] && echo "Make mp3"
#	nice lame --resample 24 -mj -q2 --abr 32 -b24 -B56 --lowpass 8047 --scale 1.5 \
#	"$MONTH_REPO/$JUST_DATE.wav" "$MONTH_REPO/$JUST_DATE.mp3"

	sox -V1 --multi-threaded ${SOX_V} "$MONTH_REPO/$JUST_DATE.wav" -r 16k -C -7 "$MONTH_REPO/$JUST_DATE.mp3" lowpass 12k

	rm -f "$MONTH_REPO/$JUST_DATE.wav"

	# Retag
	[ ${DEBUG} ] && echo "Retag"
	$HOME/Sources/scripts-git/Retag "$MONTH_REPO/$JUST_DATE.mp3" > /dev/null

	# Send the mail
	[ ${DOMAIL} ] && domail ${FILE}
}
##########################################


##########################################
# If the repo's not there, make it
#
function checkrepo() {
	if [ ! -d "${MONTH_REPO}" ] ; then
		mkdir -p "${MONTH_REPO}"
		MakeAFist
	fi
}
##########################################


##########################################
# CHECK FOR WORK
function checkforwork() {

	makevars "${FILE}"

	if [ -f "$MONTH_REPO/$JUST_DATE.mp3" ] ; then
		[ ${DEBUG} ] && echo -e "$(date +%Y-%m-%d\ %H:%M:%S) $JUST_DATE.mp3 already exists.  Skipping..."

		unset WS JUST_DATE NUMBER_DATE MONTH_YEAR YEAR MONTH TRACK
	else
		[ ${DEBUG} ] && echo -e "$(date +%Y-%m-%d\ %H:%M:%S) $JUST_DATE.mp3 doesn't exist.  Archiving..."
		checkrepo
		doArchive "${FILE}"
	fi
}
##########################################


case $1 in
	mail)
#		echo "case - mail"
		DOMAIL="yes"
		;;
	month)
#		echo "case - month"
		if [ ! $# -eq 2 ] ; then
			echo "Give me a date like YYMMDD"
			exit 1
		fi
		JUST_DATE=$2
		makevars
		MakeAFist
		exit
		;;
#	*)
#		echo "case - *"
#		;;
esac


# DO IT
cd "$REPO/Weekly"
for FILE in *.mp3 ; do checkforwork "$FILE" ; done
